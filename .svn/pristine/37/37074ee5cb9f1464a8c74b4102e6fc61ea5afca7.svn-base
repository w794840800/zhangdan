package com.beidou.ybz.accountbook.util;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.os.Environment;
import android.os.PowerManager;
import android.support.v4.app.ActivityCompat;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.KeyCharacterMap;
import android.view.KeyEvent;
import android.view.ViewConfiguration;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.TextView;

import com.tbruyelle.rxpermissions.RxPermissions;

import rx.functions.Action1;

public class SppaConstant {
	static int width, height;

	public static String getIPmobile() {
		return getIPmobilev12();
	}

	public static String getIPmobilev11() {
		return getIPmobilev12();
	}

	public static String getIPmobilev12() {
//		return "http://testinterface.8518.com/app/gatewayV2.php?service=";// 测试+
		return "http://interface.8518.com/app/gatewayV2.php?service=";//正式s+
	}

	public static String getIPmobilev() {
//		return "http://testbao.8518.com";// 测试+
		return "http://bao.8518.com";// 正式+
	}

	public static String getIPAddress() {
//		return "http://testwap.8518.com";// 测试+
		return "http://wap.8518.com";// 正式+
	}

	public static String getDetail(Context context) {

		return context.getSharedPreferences("Configset", 0).getString(
				"file_url", "");
	}

	public final static String APP_VERSION = "2.2.1";// 每个版本都要变
	public final static String ANDROID = "2";


	/**
	 * 汉字拼音排序比较器 
	 */
	static public class SpellComparator implements Comparator {
		public int compare(Object o1, Object o2) {
			try {
				// 取得比较对象的汉字编码，并将其转换成字符串
				String s1 = new String(o1.toString().getBytes("GB2312"), "ISO-8859-1");
				String s2 = new String(o2.toString().getBytes("GB2312"), "ISO-8859-1");
				// 运用String类的 compareTo（）方法对两对象进行比较
				return s1.compareTo(s2);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return 0;
		}
	}


	/**
	 * 隐藏键盘
	 * @param act
	 * @param et
	 * @return
	 */
	static public void hideInput(Activity act, EditText et) {
		//点击按钮时  先隐藏软键盘，再执行响应操作
		InputMethodManager inputMethodManager = (InputMethodManager) act.getApplicationContext().
				getSystemService(Context.INPUT_METHOD_SERVICE);
		inputMethodManager.hideSoftInputFromWindow(et.getWindowToken(), 0);
	}


	/**
	 * 从AndroidManifest.xml中获取channel出现错误提示：Key xx expected String but value was
	 * a java.lang.Integer. The default value <null> was reurned。
	 * 对于AndroidManifest.xml配置channel名称时，当直接使用数字字符串时，会出现如上所示，获取到的channel值为null。
	 * 或者说，并不建议使用数字字符串直接作为渠道名称。
	 *
	 * @param context
	 * @return
	 */
	public static String getChannel(Context context) {
		String dataName = null;
		try {
			ApplicationInfo appInfo = context.getPackageManager()
					.getApplicationInfo(context.getPackageName(),
							PackageManager.GET_META_DATA);

			dataName = appInfo.metaData.getString("UMENG_CHANNEL");
			if (dataName == null) {
				dataName = String.valueOf(appInfo.metaData
						.getInt("UMENG_CHANNEL"));
			}
		} catch (NameNotFoundException e) {
			e.printStackTrace();
		}

		return dataName;
	}

	/**
	 * 获取设备的分辨率-宽度
	 *
	 * @param ac
	 * @return
	 */
	public static int getWidth(Activity ac) {
		DisplayMetrics dm = new DisplayMetrics();
		ac.getWindowManager().getDefaultDisplay().getMetrics(dm);
		width = dm.widthPixels;

		// height = dm.heightPixels;
		Log.i("系统信息", "该设备的分辨是：" + width + "*" + height);// 480*854
		return width;

	}

	/**
	 * make true current connect service is wifi
	 *
	 * @param mContext
	 * @return
	 */
	public static boolean isWifi(Context mContext) {
		ConnectivityManager connectivityManager = (ConnectivityManager) mContext
				.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo activeNetInfo = connectivityManager.getActiveNetworkInfo();
		if (activeNetInfo != null
				&& activeNetInfo.getType() == ConnectivityManager.TYPE_WIFI) {
			return true;
		}
		return false;
	}

	/**
	 * 获取设备的分辨率-高度
	 *
	 * @param ac
	 * @return
	 */
	public static int getHeight(Activity ac) {
		DisplayMetrics dm = new DisplayMetrics();
		ac.getWindowManager().getDefaultDisplay().getMetrics(dm);
		// width = dm.widthPixels;
		height = dm.heightPixels;
		Log.i("系统信息", "该设备的分辨是：" + width + "*" + height);// 480*854
		return height;

	}

	/**
	 * 判断设备里是否安装某个程序包
	 *
	 * @param context
	 * @param packageName
	 * @return
	 */
	public static boolean isAvilible(Context context, String packageName) {
		final PackageManager packageManager = context.getPackageManager();
		// 获取所有已安装程序的包信息
		List<PackageInfo> pinfo = packageManager.getInstalledPackages(0);
		for (int i = 0; i < pinfo.size(); i++) {
			if (pinfo.get(i).packageName.equalsIgnoreCase(packageName))
				return true;
		}
		return false;
	}

	/**
	 * 获取设备唯一标识符
	 *
	 //	 * @param context
	 * @return device_id ，mac
	 */
	/*public static String getDeviceInfo(Context context) {
		String device_id = "";
		try {
//			android.telephony.TelephonyManager tm = (android.telephony.TelephonyManager) context
//					.getSystemService(Context.TELEPHONY_SERVICE);

			final String finalDevice_id = device_id;
			RxPermissions.getInstance(context)
					.request(Manifest.permission.READ_PHONE_STATE)//这里填写所需要的权限
					.subscribe(new Action1<Boolean>() {
						@Override
						public void call(Boolean aBoolean) {
							if (aBoolean) {//true表示获取权限成功（注意这里在android6.0以下默认为true）
								finalDevice_id = tm.getDeviceId();
							} else {
							}
						}
					});
			TelephonyManager tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
			tm.getDeviceId();

			if (TextUtils.isEmpty(device_id)) {
				device_id = android.provider.Settings.Secure.getString(
						context.getContentResolver(),
						android.provider.Settings.Secure.ANDROID_ID);
			}

			return device_id;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}*/

	//获得独一无二的Psuedo ID
	public static String getUniquePsuedoID() {
		String serial = null;

		String m_szDevIDShort = "35" +
				Build.BOARD.length() % 10 + Build.BRAND.length() % 10 +

				Build.CPU_ABI.length() % 10 + Build.DEVICE.length() % 10 +

				Build.DISPLAY.length() % 10 + Build.HOST.length() % 10 +

				Build.ID.length() % 10 + Build.MANUFACTURER.length() % 10 +

				Build.MODEL.length() % 10 + Build.PRODUCT.length() % 10 +

				Build.TAGS.length() % 10 + Build.TYPE.length() % 10 +

				Build.USER.length() % 10; //13 位

		try {
			serial = android.os.Build.class.getField("SERIAL").get(null).toString();
			//API>=9 使用serial号
			return new UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();
		} catch (Exception exception) {
			//serial需要一个初始化
			serial = "serial"; // 随便一个初始化
		}
		//使用硬件信息拼凑出来的15位号码
		return new UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();
	}

	public final static boolean isScreenLocked(Context c) {
		// android.app.KeyguardManager mKeyguardManager = (KeyguardManager)
		// c.getSystemService(c.KEYGUARD_SERVICE);
		// return !mKeyguardManager.inKeyguardRestrictedInputMode();

		PowerManager pm = (PowerManager) c
				.getSystemService(Context.POWER_SERVICE);
		boolean isScreenOn = pm.isScreenOn();// 如果为true，则表示屏幕“亮”了，否则屏幕“暗”了。

		return isScreenOn;
	}

	/**
	 * 将时间戳转换成年月日格式的字符串
	 * 
	 * @param time
	 *            时间戳字符串
	 * @return 年月日格式的字符串
	 */
	public static String getStrTime(String time) {
		String re_StrTime = null;
		SimpleDateFormat sdf = null;
		if (time.equals("")) {
			return "";
		}
		sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		long loc_time = Long.valueOf(time);
		re_StrTime = sdf.format(new Date(loc_time * 1000L));
		return re_StrTime;
	}

	public static String secToTime(int time) {
		String timeStr = null;
		int hour = 0;
		int minute = 0;
		int second = 0;
		if (time <= 0)
			return "00:00";
		else {
			minute = time / 60;
			if (minute < 60) {
				second = time % 60;
				timeStr = unitFormat(hour) + ":" + unitFormat(minute) + ":"
						+ unitFormat(second);
			} else {
				hour = minute / 60;
				if (hour > 99)
					return "99:59:59";
				minute = minute % 60;
				second = time - hour * 3600 - minute * 60;
				timeStr = unitFormat(hour) + ":" + unitFormat(minute) + ":"
						+ unitFormat(second);
			}
		}
		return timeStr;
	}
	
	public static String secToTime2(int time) {
		String timeStr = null;
		int hour = 0;
		int minute = 0;
		int second = 0;
		if (time <= 0)
			return "00:00";
		else {
			minute = time / 60;
			if (minute < 60) {
				second = time % 60;
				timeStr = unitFormat(minute) + ":" + unitFormat(second);
			} else {
				hour = minute / 60;
				if (hour > 99)
					return "99:59:59";
				minute = minute % 60;
				second = time - hour * 3600 - minute * 60;
				timeStr = unitFormat(hour) + ":" + unitFormat(minute) + ":"
						+ unitFormat(second);
			}
		}
		return timeStr;
	}

	public static String unitFormat(int i) {
		String retStr = null;
		if (i >= 0 && i < 10)
			retStr = "0" + Integer.toString(i);
		else
			retStr = "" + i;
		return retStr;
	}

	public static String getStrTime2(String time) {
		String re_StrTime = null;
		SimpleDateFormat sdf = null;
		if (time.equals("")) {
			return "";
		}
		sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		long loc_time = Long.valueOf(time);
		re_StrTime = sdf.format(new Date(loc_time * 1000L));
		return re_StrTime;
	}

	public static String getStrTime3(String time) {
		String re_StrTime = null;
		SimpleDateFormat sdf = null;
		if (time.equals("")) {
			return "";
		}
		sdf = new SimpleDateFormat("yyyy-MM-dd");
		long loc_time = Long.valueOf(time);
		re_StrTime = sdf.format(new Date(loc_time * 1000L));
		return re_StrTime;
	}

	public static String getStrTime4(String time) {
		String re_StrTime = null;
		SimpleDateFormat sdf = null;
		if (time.equals("")) {
			return "";
		}
		sdf = new SimpleDateFormat("yyyy.MM.dd");
		long loc_time = Long.valueOf(time);
		re_StrTime = sdf.format(new Date(loc_time * 1000L));
		return re_StrTime;
	}

	
	public static String getCurrentDate(){
		Date date=new Date();//获取当前日期也可以用Calendar.getInstance();

		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");

//		SimpleDateFormat sdf=new SimpleDateFormat("yyyy年MM月dd日 hh:mm:ss");

		return sdf.format(date);
	}
	
	/** 
	*字符串的日期格式的计算 
	*/  
	    public static int daysBetween(String smdate,String bdate) throws ParseException{  
	        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");  
	        Calendar cal = Calendar.getInstance();    
	        cal.setTime(sdf.parse(smdate));    
	        long time1 = cal.getTimeInMillis();                 
	        cal.setTime(sdf.parse(bdate));    
	        long time2 = cal.getTimeInMillis();         
	        long between_days=(time2-time1)/(1000*3600*24);  
	            
	       return Integer.parseInt(String.valueOf(between_days));     
	    }  
	
	
	public static boolean isNumeric(String str) {
		if(str != null && str.startsWith("-")){
			str = str.substring(1);
		}
		Pattern pattern = Pattern.compile("[.0-9]*");

		Matcher isNum = pattern.matcher(str);

		if (!isNum.matches()) {

			return false;

		}

		return true;

	}

	/**
	 * 判断一串字符串中是否包含中文字符
	 * 
	 * @param str
	 * @return
	 */
	public static boolean isCN(String str) {
		try {
			byte[] bytes = str.getBytes("UTF-8");
			if (bytes.length == str.length()) {
				return false;
			} else {
				return true;
			}
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * 判断一串字符串中是否全是中文字符
	 * 
	 * @param str
	 * @return
	 */
	public static boolean isAllCN(String str) {
		for (int i = 0; i < str.length(); i++) {
			System.out.println(str.substring(i, i + 1));
			try {
				if (str.substring(i, i + 1).getBytes("utf-8").length == 1
						|| str.contains("￥")) {
					return false;
				}
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		return true;
	}

	/**
	 * 判断网络是否连接
	 * 
	 * @param c
	 * @return
	 */
	public static boolean isNetworkAvailable(Context c) {
		try {
			ConnectivityManager connectivity = (ConnectivityManager) c
					.getSystemService(Context.CONNECTIVITY_SERVICE);
			if (connectivity == null) {
				return false;
			} else {
				NetworkInfo info = connectivity.getActiveNetworkInfo();
				if (info.isAvailable()) {
					return true;
				}
			}
		} catch (Exception e) {
		}
		return false;
	}

	static public String initSavePath() {
		File dateDir = Environment.getExternalStorageDirectory();
		String path = dateDir.getAbsolutePath() + "/RectPhoto/";
		File folder = new File(path);
		if (!folder.exists()) {
			folder.mkdir();
		}
		return path;
	}

	// 保存图片
	static public void saveJpeg(Bitmap bm) {

		long dataTake = System.currentTimeMillis();
		String jpegName = initSavePath() + dataTake + ".jpg";
		Log.i("8518", "路径 " + jpegName);

		// File jpegFile = new File(jpegName);
		try {
			FileOutputStream fout = new FileOutputStream(jpegName);
			BufferedOutputStream bos = new BufferedOutputStream(fout);

			// Bitmap newBM = bm.createScaledBitmap(bm, 600, 800, false);

			bm.compress(Bitmap.CompressFormat.JPEG, 100, bos);
			bos.flush();
			bos.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block

			e.printStackTrace();
		}
	}

	public static int getPixels(int Unit, float size) {
        DisplayMetrics metrics = Resources.getSystem().getDisplayMetrics();
        return (int) TypedValue.applyDimension(Unit, size, metrics);
    }
	
	/**
	 * 将每三个数字加上逗号处理（通常使用金额方面的编辑）
	 * 
	 * @param str
	 *            无逗号的数字 <a
	 *            href="http://home.51cto.com/index.php?s=/space/34010"
	 *            target="_blank">@return</a> 加上逗号的数字
	 */
	public static String addComma(String str) throws Exception{
		if(str != null && str.contains(",")){
			return str;
		}else if ( str == null || str.equals("") || !isNumeric(str) ) {
			return "0.00";
		} else {
			String st = (new DecimalFormat("0").format(Double.parseDouble(str)));
			// 将传进数字反转
			String reverseStr = new StringBuilder(st).reverse().toString();
			System.out.println("reverseStr==>" + reverseStr);
			String strTemp = "";
			for (int i = 0; i < reverseStr.length(); i++) {
				if (i * 3 + 3 > reverseStr.length()) {
					strTemp += reverseStr.substring(i * 3, reverseStr.length());
					break;
				}
				strTemp += reverseStr.substring(i * 3, i * 3 + 3) + ",";
			}
			// 将[789,456,] 中最后一个[,]去除
			if (strTemp.endsWith(",")) {
				strTemp = strTemp.substring(0, strTemp.length() - 1);
			}
			// 将数字重新反转
			String resultStr = new StringBuilder(strTemp).reverse().toString();
			return resultStr;
		}
	}
	
	/**
	 * 将每三个数字加上逗号处理（通常使用金额方面的编辑）
	 * 
	 * @param str
	 *            无逗号的数字 <a
	 *            href="http://home.51cto.com/index.php?s=/space/34010"
	 *            target="_blank">@return</a> 加上逗号的数字
	 */
	public static String addCommaContainsPoint(String str) throws Exception{
		String prefix = "";
		if(str != null && str.contains(",")){
			return str;
		}else if (str != null && str.equals("****")  ) {
			return "****";
		}else if (str == null || str.equals("") || !isNumeric(str) ) {
			return "0.00";
		}

		if(str != null && str.startsWith("-")){
			prefix = "-";
			str = str.substring(1);
		}

		/*double result1 = Double.parseDouble(str);
		BigDecimal b = new BigDecimal(result1);
		double f1 = b.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();//4舍5入
		LogUtils.logd("f1:"+f1);
		BigDecimal b2 = new BigDecimal(f1);
		str = b2.toString();//String.valueOf(f1);*/


		double result1 = Double.parseDouble(str);
		BigDecimal b = new BigDecimal(result1).setScale(2, BigDecimal.ROUND_HALF_UP);//4舍5入
//		LogUtils.logd("f1:"+f1);
//		BigDecimal b2 = new BigDecimal(f1);
		str = b.toString();//String.valueOf(f1);

//		LogUtils.logd("str:"+str);
//		LogUtils.logd("b2:"+b.toString());

		if(str.contains(".")){
			String s1 = str.split("\\.")[0];
			String s2 = str.split("\\.")[1];
			
			// 将传进数字反转
			String reverseStr = new StringBuilder(s1).reverse().toString();
			String strTemp = "";
			for (int i = 0; i < reverseStr.length(); i++) {
				if (i * 3 + 3 > reverseStr.length()) {
					strTemp += reverseStr.substring(i * 3,
							reverseStr.length());
					break;
				}
				strTemp += reverseStr.substring(i * 3, i * 3 + 3) + ",";
			}
			// 将[789,456,] 中最后一个[,]去除
			if (strTemp.endsWith(",")) {
				strTemp = strTemp.substring(0, strTemp.length() - 1);
			}
			// 将数字重新反转
			String resultStr = new StringBuilder(strTemp).reverse()
					.toString();
			if(s2.length() >= 2){
				return prefix+resultStr+"."+s2.substring(0, 2);
			}else{
				return prefix+resultStr+"."+s2+"0";
			}
		}else {
			String st = (new DecimalFormat("0").format(Double.parseDouble(str)));
			if (st != null && st.length() < 4) {
				return prefix+new DecimalFormat("0.00").format(Double.parseDouble(st));
			} else {
				// 将传进数字反转
				String reverseStr = new StringBuilder(st).reverse().toString();
				System.out.println("reverseStr==>" + reverseStr);
				String strTemp = "";
				for (int i = 0; i < reverseStr.length(); i++) {
					if (i * 3 + 3 > reverseStr.length()) {
						strTemp += reverseStr.substring(i * 3,
								reverseStr.length());
						break;
					}
					strTemp += reverseStr.substring(i * 3, i * 3 + 3) + ",";
				}
				// 将[789,456,] 中最后一个[,]去除
				if (strTemp.endsWith(",")) {
					strTemp = strTemp.substring(0, strTemp.length() - 1);
				}
				// 将数字重新反转
				String resultStr = new StringBuilder(strTemp).reverse()
						.toString();
				return prefix+resultStr+".00";
				// return new
				// DecimalFormat("0.00").format(Double.parseDouble(resultStr));
			}
		}
	}


	
	
	/**
	 * 判断三个view的实现情况
	 * @param tv1
	 * @param tv2
	 * @param tv3
	 * @return
	 */
	public static int getVisibility(TextView tv1,TextView tv2,TextView tv3){
		int visible1 =  tv1.getVisibility();
		int visible2 =  tv2.getVisibility();
		int visible3 =  tv3.getVisibility();
//		if(tv1.getVisibility() == View.GONE && tv2.getVisibility() == View.INVISIBLE && tv3.getVisibility() == View.VISIBLE){
//			return 3;
//		}else if(tv1.getVisibility() != View.VISIBLE && tv2.getVisibility() != View.VISIBLE && tv3.getVisibility() != View.VISIBLE){
//			return 0;
//		}else if(){
//			
//		}
		if(visible1+visible2+visible3 == 0){//全显示
			return 3;
		}else if(visible1+visible2+visible3 == 24 ){//0个显示
			return 0;
		}else if(visible1+visible2+visible3 == 16){//1个显示
			return 1;
		}else if(visible1+visible2+visible3 == 8){//2个显示
			return 2;
		}
		
		
		return 0;
	}
	
	/**
	 * 检查设备是否存在 导航栏 NavigationBar
	 * @param activity
	 * @return
	 */
	 public static boolean checkDeviceHasNavigationBar(Context activity) {  
		  
	        //通过判断设备是否有返回键、菜单键(不是虚拟键,是手机屏幕外的按键)来确定是否有navigation bar  
	        boolean hasMenuKey = ViewConfiguration.get(activity)  
	                .hasPermanentMenuKey();  
	        boolean hasBackKey = KeyCharacterMap  
	                .deviceHasKey(KeyEvent.KEYCODE_BACK);  
	  
	        if (!hasMenuKey && !hasBackKey) {  
	            // 做任何你需要做的,这个设备有一个导航栏  
	            return true;  
	        }  
	        return false;  
	    } 
	 
	 /**
		 * 获取导航栏 NavigationBar的高度
		 * @param activity
		 * @return
		 */
	 public static int getNavigationBarHeight(Activity activity) {  
	        Resources resources = activity.getResources();  
	        int resourceId = resources.getIdentifier("navigation_bar_height",  
	                "dimen", "android");  
	        //获取NavigationBar的高度  
	        int height = resources.getDimensionPixelSize(resourceId);  
	        return height;  
	    }  

}
