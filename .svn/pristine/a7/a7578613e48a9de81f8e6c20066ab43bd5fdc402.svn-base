package com.beidou.ybz.accountbook.ui;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.beidou.ybz.accountbook.R;
import com.beidou.ybz.accountbook.adapter.AdapterHuizhangSecondClass;
import com.beidou.ybz.accountbook.mvp.entity.AddOverseasRequestModel;
import com.beidou.ybz.accountbook.mvp.entity.HuizhangBigClassModel;
import com.beidou.ybz.accountbook.mvp.entity.HuizhangSecondClassModel;
import com.beidou.ybz.accountbook.mvp.entity.RequestBody;
import com.beidou.ybz.accountbook.mvp.other.MvpActivity;
import com.beidou.ybz.accountbook.mvp.presenter.CommonPresenter;
import com.beidou.ybz.accountbook.mvp.view.CommonView;
import com.beidou.ybz.accountbook.mvp.view.OtherView;
import com.beidou.ybz.accountbook.ui.fragment.MainCardFragment;
import com.beidou.ybz.accountbook.util.ActivityUtils;
import com.beidou.ybz.accountbook.util.DESedeUtil;
import com.beidou.ybz.accountbook.util.LogUtils;
import com.beidou.ybz.accountbook.util.Utils;
import com.beidou.ybz.accountbook.widget.MaterialDialog;
import com.beidou.ybz.accountbook.widget.ScaleInTransformer;
import com.beidou.ybz.accountbook.widget.ScaleTransformer;
import com.chad.library.adapter.base.BaseQuickAdapter;
import com.google.gson.Gson;

import java.util.ArrayList;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

public class HuiZhangActivity extends MvpActivity<CommonPresenter> implements CommonView<HuizhangBigClassModel>, OtherView<HuizhangSecondClassModel> {
    @Bind(R.id.ivBack)
    ImageView ivBack;
    @Bind(R.id.llHuizhangChengjiu)
    LinearLayout llHuizhangChengjiu;
    @Bind(R.id.viewpager)
    ViewPager mViewPager;
    @Bind(R.id.rvSecondClass)
    RecyclerView rvSecondClass;
    private MaterialDialog materialDialog;
    private String encMsg, signMsg;
    private List<HuizhangBigClassModel.BodyBean.BadgeTypeListBean> badgeTypeListBeanList;
    CardFragmentPagerAdapter mCardFragmentPagerAdapter;
    private MainCardFragment mainFragment;
    AdapterHuizhangSecondClass adapterHuizhangSecondClass;
    List<HuizhangSecondClassModel.BodyBean.ShowListBean> showListBeanList;
    HuizhangSecondClassModel.BodyBean.ShowListBean showListBean;
    private int viewpagerSize = 0;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hui_zhang);

        ButterKnife.bind(this);
        ActivityUtils.setStatusBar(mActivity);
        initMaterialDialog();

        getBigClass();
        initView();
    }

    void initView() {
//        getSecondClass("3");
        rvSecondClass.setLayoutManager(new GridLayoutManager(mActivity,3));
        adapterHuizhangSecondClass = new AdapterHuizhangSecondClass(R.layout.huizhang_secondclass_item,null);
        rvSecondClass.setAdapter(adapterHuizhangSecondClass);

        rvSecondClass.setItemAnimator(new DefaultItemAnimator());
        adapterHuizhangSecondClass.setOnItemClickListener(new BaseQuickAdapter.OnItemClickListener() {
            @Override
            public void onItemClick(BaseQuickAdapter adapter, View view, int position) {
                showListBean = showListBeanList.get(position);
                Intent in = new Intent(mActivity, HuiZhangDetailActivity.class);
                in.putExtra("showListBean",showListBean);
                startActivity(in);
                overridePendingTransition(R.anim.alpha_in, 0);
            }
        });

        mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {}
            @Override
            public void onPageSelected(int position) {
                String type = badgeTypeListBeanList.get(position % (badgeTypeListBeanList.size())).getBadgeType();
                getSecondClass(type);
            }
            @Override
            public void onPageScrollStateChanged(int state) {}
        });
    }

    //获取徽章二级分类
    void getSecondClass(String badgeType) {
        RequestBody<AddOverseasRequestModel> loginRequestModel = new RequestBody<>();
        RequestBody.HeaderBean headerBean = new RequestBody.HeaderBean(Utils.getIPAddress(mActivity), spUtils.getSecretKeyId());
        AddOverseasRequestModel requestModel = new AddOverseasRequestModel();
        requestModel.setUserNo(spUtils.getUserId());
        requestModel.setBadgeType(badgeType);

        loginRequestModel.setBody(requestModel);
        loginRequestModel.setHeader(headerBean);

        Gson gson2 = new Gson();
        String json2 = gson2.toJson(loginRequestModel);
        LogUtils.logd(json2);
        try {
            encMsg = DESedeUtil.getRequestAfter3DES(spUtils.getSecretKey(), spUtils.getSecretIv(), json2);
            signMsg = DESedeUtil.getRequestAfterSign(encMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        mvpPresenter.badgedetaillist(encMsg, signMsg, "2", spUtils.getSecretKeyId());
    }

    //获取徽章大类
    void getBigClass() {
        RequestBody<AddOverseasRequestModel> loginRequestModel = new RequestBody<>();
        RequestBody.HeaderBean headerBean = new RequestBody.HeaderBean(Utils.getIPAddress(mActivity), spUtils.getSecretKeyId());
        AddOverseasRequestModel requestModel = new AddOverseasRequestModel();
        requestModel.setUserNo(spUtils.getUserId());

        loginRequestModel.setBody(requestModel);
        loginRequestModel.setHeader(headerBean);

        Gson gson2 = new Gson();
        String json2 = gson2.toJson(loginRequestModel);
        LogUtils.logd(json2);
        try {
            encMsg = DESedeUtil.getRequestAfter3DES(spUtils.getSecretKey(), spUtils.getSecretIv(), json2);
            signMsg = DESedeUtil.getRequestAfterSign(encMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        mvpPresenter.badgetypelist(encMsg, signMsg, "2", spUtils.getSecretKeyId());
    }

    /**
     * 初始化dialog
     */
    void initMaterialDialog() {
        View view = LayoutInflater.from(this).inflate(R.layout.huizhang_chengjiuzi, null);
        materialDialog = new MaterialDialog(this).setContentView(view);
        materialDialog.setHuizhangCloseButton("huizhang", new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                materialDialog.dismiss();
            }
        }).setOnDismissListener(new DialogInterface.OnDismissListener() {
            @Override
            public void onDismiss(DialogInterface dialogInterface) {
            }
        });
        materialDialog.setPositiveButtonEnable(false);

    }

    @OnClick({R.id.ivBack, R.id.llHuizhangChengjiu})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.ivBack:
                ActivityUtils.finishActivity(mActivity);
                break;
            case R.id.llHuizhangChengjiu:
                materialDialog.show();
                break;
        }
    }


    @Override
    public void onSuccess(HuizhangSecondClassModel model) {
        showListBeanList = model.getBody().getShowList();
        adapterHuizhangSecondClass.setNewData(showListBeanList);
    }

    @Override
    public void onFail(String model) {
        toastShow(model);
    }


    @Override
    protected CommonPresenter createPresenter() {
        return new CommonPresenter(this, this);
    }

    @Override
    public void getDataSuccess(HuizhangBigClassModel model) {
        badgeTypeListBeanList = model.getBody().getBadgeTypeList();
        mCardFragmentPagerAdapter = new CardFragmentPagerAdapter(getSupportFragmentManager(), 0);
        if (badgeTypeListBeanList != null && badgeTypeListBeanList.size() > 0) {
            viewpagerSize = badgeTypeListBeanList.size();
            Bundle bundle = null;
            for (int i = 0; i < 100; i++) {//50
                bundle = new Bundle();
                mainFragment = new MainCardFragment();
                bundle.putParcelable("data", badgeTypeListBeanList.get(i % (badgeTypeListBeanList.size())));
                mainFragment.setArguments(bundle);
                mCardFragmentPagerAdapter.addCardFragment(mainFragment);
            }
            mViewPager.setOffscreenPageLimit(4);

            mViewPager.setPageMargin(0);//50

            mViewPager.setAdapter(mCardFragmentPagerAdapter);
            mViewPager.setPageTransformer(true, new ScaleInTransformer());
            mViewPager.setCurrentItem(48);

            getSecondClass(badgeTypeListBeanList.get(0).getBadgeType());

        }
    }

    class CardFragmentPagerAdapter extends FragmentStatePagerAdapter {
        private List<MainCardFragment> mFragments;
        public CardFragmentPagerAdapter(FragmentManager fm, float baseElevation) {
            super(fm);
            mFragments = new ArrayList<>();
        }
        @Override
        public int getCount() {
            return mFragments.size();
        }

//        @Override
//        public boolean isViewFromObject(View view, Object object) {
//            return ((Fragment)object).getView() == view;
//        }

        @Override
        public Fragment getItem(int position) {
            LogUtils.logd("getItem-position:"+position% mFragments.size());
            return mFragments.get(position % mFragments.size());
        }
        @Override
        public Object instantiateItem(ViewGroup container, int position) {
            //写死50条写法
            Object fragment = super.instantiateItem(container, position % mFragments.size());
            mFragments.set(position % mFragments.size(), (MainCardFragment) fragment);
            return fragment;
        }
        /**
         * Remove a page for the given position. The adapter is responsible for
         * removing the view from its container,
         * although it only must ensure this is done by the time it returns from finishUpdate(View).
         * 移除给定位置的数据，适配器负责从container（容器）中取出，但是这个必须保证是在finishUpdate（view）
         * 返回的时间内完成
         *
         * @param container
         * @param position
         * @param object
         */
//        @Override
//        public void destroyItem(ViewGroup container, int position, Object object) {
//            super.destroyItem(container, position % mFragments.size(), object);
//        }

        /*@Override
        public void finishUpdate(ViewGroup container) {
            super.finishUpdate(container);
            int position = mViewPager.getCurrentItem();
            LogUtils.logd("position:"+position);
            if (position == 0) {
                Log.i("", "position: "+position);
                LogUtils.logd("position:"+position);
                position = viewpagerSize;
                mViewPager.setCurrentItem(position,false);
            }else if (position == (viewpagerSize+2) - 1) {
                Log.i("", "position: "+position);
                LogUtils.logd("position:"+position);
                position = 1;
                mViewPager.setCurrentItem(position,false);
            }
        }*/



        public void addCardFragment(MainCardFragment fragment) {
            mFragments.add(fragment);
        }
    }

    @Override
    public void getDataFail(String msg) {

    }
}
