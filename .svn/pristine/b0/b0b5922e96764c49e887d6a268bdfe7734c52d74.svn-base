package com.beidou.ybz.accountbook.ui;

import android.animation.ValueAnimator;
import android.app.DatePickerDialog;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.util.Log;
import android.util.TypedValue;
import android.view.KeyEvent;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.baidu.mobstat.StatService;
import com.beidou.ybz.accountbook.R;
import com.beidou.ybz.accountbook.mvp.entity.AddOverseasRequestModel;
import com.beidou.ybz.accountbook.mvp.entity.RequestBody;
import com.beidou.ybz.accountbook.mvp.entity.SercetKeyOverdueModel;
import com.beidou.ybz.accountbook.mvp.main.TextWatchView;
import com.beidou.ybz.accountbook.mvp.other.MvpActivity;
import com.beidou.ybz.accountbook.mvp.presenter.CommonPresenter;
import com.beidou.ybz.accountbook.mvp.view.OtherView;
import com.beidou.ybz.accountbook.util.ActivityUtils;
import com.beidou.ybz.accountbook.util.DESedeUtil;
import com.beidou.ybz.accountbook.util.ImeUtil;
import com.beidou.ybz.accountbook.util.LogUtils;
import com.beidou.ybz.accountbook.util.ToastUtils;
import com.beidou.ybz.accountbook.util.Utils;
import com.beidou.ybz.accountbook.widget.ClearEditText;
import com.beidou.ybz.accountbook.widget.NewWatcher;
import com.google.gson.Gson;
import com.jakewharton.rxbinding.widget.RxTextView;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;
import rx.Observable;
import rx.functions.Action1;
import rx.functions.Func6;

/**
 * Author: xu.yang on 2017/12/5
 * QQ:754444814
 * E-mail:754444814@qq.com
 * module: 添加欠款
 */
public class AddArrears extends MvpActivity<CommonPresenter> implements OtherView<SercetKeyOverdueModel> {
    @Bind(R.id.tv_title)
    TextView tvTitle;
    @Bind(R.id.toolbar)
    Toolbar toolbar;
    @Bind(R.id.ivShowMore)
    ImageView ivShowMore;
    @Bind(R.id.llShowMore)
    LinearLayout llShowMore;
    @Bind(R.id.llMore)
    LinearLayout llMore;
    @Bind(R.id.btnSave)
    Button btnSave;
    @Bind(R.id.cetName)
    ClearEditText cetName;
    @Bind(R.id.cetMoney)
    ClearEditText cetMoney;
    @Bind(R.id.tvBorrowTime)
    TextView tvBorrowTime;
    @Bind(R.id.llBorrowTime)
    LinearLayout llBorrowTime;
    @Bind(R.id.tvReturnTime)
    TextView tvReturnTime;
    @Bind(R.id.llReturnTime)
    LinearLayout llReturnTime;
    @Bind(R.id.cetInterest)
    ClearEditText cetInterest;
    @Bind(R.id.cetMemo)
    ClearEditText cetMemo;
    private boolean isMoreShow;
    private int height;
    private ValueAnimator valueAnimatorShow, valueAnimatorHide;
    private DatePickerDialog datePickerDialog;
    private int year, month, day;
    private boolean isBorrow;
    private String encMsg, signMsg;
    private boolean isEdit;//true-编辑 false-新增
    private boolean isFromList;//是否来源于列表
    private String id, amount, arrearsName, arrearsStatus, interest, loanTime, memo, returnTime,from;
    //    private NumberPicker np1,
    private DatePicker datePicker;
    private boolean isFromAddasset;//来自首次添加页面
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_addarrears);
        ButterKnife.bind(this);

        tvTitle.setText("添加欠款");
        tvTitle.setTextColor(getResources().getColor(R.color.txt_color));
        toolbar.setBackgroundColor(getResources().getColor(R.color.colorWhite));
        toolbar.setNavigationIcon(R.drawable.back_black);
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                StatService.onEvent(mActivity,"点击欠款资产编辑页返回按钮","放弃欠款资产编辑",1);
                ActivityUtils.finishActivity(mActivity);
                ImeUtil.hideSoftKeyboard(cetName);
            }
        });

        handleIntent(getIntent());

        initView();
        initNumberPicker();

    }

    /**
     * DatePicker 日期监听
     */
    private DatePickerDialog.OnDateSetListener datelistener = new DatePickerDialog.OnDateSetListener() {
        /**params：view：该事件关联的组件
         * params：myyear：当前选择的年
         * params：monthOfYear：当前选择的月
         * params：dayOfMonth：当前选择的日
         */
        @Override
        public void onDateSet(DatePicker view, int myyear, int monthOfYear, int dayOfMonth) {
            //修改year、month、day的变量值，以便以后单击按钮时，DatePickerDialog上显示上一次修改后的值
            year = myyear;
            month = monthOfYear;
            day = dayOfMonth;
            //更新日期
            updateDate();
        }

        //当DatePickerDialog关闭时，更新日期显示
        private void updateDate() {
            //在TextView上显示日期
            String date = year + "年" + (month + 1) + "月" + day + "日";
            if (isBorrow) {
                tvBorrowTime.setText(date);
//                try {
//                    datePicker.setMinDate(Long.parseLong(dateToStamp(date)));
//                    datePicker.setMaxDate(Long.parseLong(dateToStamp("2100年1月1日")));
//                } catch (ParseException e) {
//                    e.printStackTrace();
//                }
            } else {
                tvReturnTime.setText(date);
//                try {
//                    datePicker.setMinDate(Long.parseLong(dateToStamp("1900年1月1日")));
//                    datePicker.setMaxDate(Long.parseLong(dateToStamp(date)));
//                } catch (ParseException e) {
//                    e.printStackTrace();
//                }
            }
        }
    };

    void initNumberPicker() {
        Calendar mycalendar = Calendar.getInstance();

        year = mycalendar.get(Calendar.YEAR); //获取Calendar对象中的年
        month = mycalendar.get(Calendar.MONTH);//获取Calendar对象中的月
        day = mycalendar.get(Calendar.DAY_OF_MONTH);//获取这个月的第几天

        datePickerDialog = new DatePickerDialog(mActivity, datelistener, year, month, day);
        datePicker = datePickerDialog.getDatePicker();

        LogUtils.logd("new Date().getTime()："+new Date().getTime());

    }

    /*
   * 将时间转换为时间戳
   */
    public static String dateToStamp(String s) throws ParseException {
        String res;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy年MM月dd日");
        Date date = simpleDateFormat.parse(s);
        long ts = date.getTime();
        res = String.valueOf(ts);
        return res;
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        handleIntent(intent);
    }

    private void handleIntent(Intent in){
        if (in != null) {
            id = in.getStringExtra("id");
            arrearsName = in.getStringExtra("arrearsName");
            memo = in.getStringExtra("memo");
            loanTime = in.getStringExtra("loanTime");
            returnTime = in.getStringExtra("returnTime");
            interest = in.getStringExtra("interest");
            amount = in.getStringExtra("amount");
            from = in.getStringExtra("from");
            arrearsStatus = in.getStringExtra("arrearsStatus");
        }

        if (arrearsName != null && !TextUtils.isEmpty(arrearsName)) {
            isEdit = true;
        } else {
            isEdit = false;
        }
        LogUtils.logd("isEdit:" + isEdit);
        if (isEdit) {
            tvTitle.setText("编辑欠款");
        } else {
            tvTitle.setText("添加欠款");
        }

        if(from != null && from.equals("list")){
            isFromList = true;
        }else{
            isFromList = false;
        }

        if(from != null && from.equals("addasset")){
            isFromAddasset = true;
        }else{
            isFromAddasset = false;
        }

        Utils.numberPointLimitListener(cetInterest);

        cetName.setText(arrearsName);
        if(arrearsName != null && arrearsName.length() > 0){
            cetName.setSelection(arrearsName.length());
        }
        cetMoney.setText(amount);
        if(!TextUtils.isEmpty(cetMoney.getText().toString())){
            cetMoney.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
        }
        tvBorrowTime.setText(loanTime);
        tvReturnTime.setText(returnTime);
        cetInterest.setText(interest);
        cetMemo.setText(memo);

        LogUtils.logd("startGoneAnimator");
//        cetName.startGoneAnimator();
//        cetMoney.startGoneAnimator();
//        cetMemo.startGoneAnimator();
//        cetInterest.startGoneAnimator();

    }

    void initView() {
        bindViewByRxBinding();

        //计算llMore的高度
        int w = View.MeasureSpec.makeMeasureSpec(0,
                View.MeasureSpec.UNSPECIFIED);
        int h = View.MeasureSpec.makeMeasureSpec(0,
                View.MeasureSpec.UNSPECIFIED);
        llMore.measure(w, h);
        height = llMore.getMeasuredHeight();
        Log.e("height", "initView: " + height);

        initAnimator();

        /**
         * 添加监听，在hint时和text时切换字体大小
         */
        Utils.textChangedListener(cetMoney);
    }

    /**
     * 用combineLatest处理表单验证
     */
    private void bindViewByRxBinding() {
        Observable<CharSequence> Observable1 = RxTextView.textChanges(cetName);
        Observable<CharSequence> Observable2 = RxTextView.textChanges(cetMoney);
        Observable<CharSequence> Observable3 = RxTextView.textChanges(tvBorrowTime);
        Observable<CharSequence> Observable4 = RxTextView.textChanges(tvReturnTime);
        Observable<CharSequence> Observable5 = RxTextView.textChanges(cetInterest);
        Observable<CharSequence> Observable6 = RxTextView.textChanges(cetMemo);

        Observable.combineLatest(Observable1, Observable2, Observable3, Observable4,Observable5, Observable6,
                new Func6<CharSequence, CharSequence, CharSequence, CharSequence,CharSequence, CharSequence, Boolean>() {
                    @Override
                    public Boolean call(CharSequence string1, CharSequence string2, CharSequence string3, CharSequence string4 , CharSequence string5, CharSequence string6) {
                        return !Utils.isTextEmpty(string1.toString()) || !Utils.isTextEmpty(string2.toString())
                                || !Utils.isTextEmpty(string3.toString()) || !Utils.isTextEmpty(string4.toString())
                                || !Utils.isTextEmpty(string5.toString()) || !Utils.isTextEmpty(string6.toString());
                    }
                }).subscribe(new Action1<Boolean>() {
            @Override
            public void call(Boolean verify) {
                if (verify) {
                    btnSave.setEnabled(true);
                    btnSave.setBackgroundResource(R.drawable.bg1);
                } else {
                    btnSave.setEnabled(false);
                    btnSave.setBackgroundResource(R.drawable.bg_unenabled);
                }
            }
        });
    }

    /**
     * 布局展开/隐藏动画
     * 属性动画-动态改变布局高度
     */
    void initAnimator() {
        final ValueAnimator.AnimatorUpdateListener ani = new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                int h = (Integer) animation.getAnimatedValue();
                //动态更新view的高度
                llMore.getLayoutParams().height = h;
                llMore.requestLayout();
            }
        };

        valueAnimatorHide = ValueAnimator.ofInt(height, 0);
        valueAnimatorShow = ValueAnimator.ofInt(0, height);

        valueAnimatorHide.addUpdateListener(ani);
        valueAnimatorShow.addUpdateListener(ani);

        valueAnimatorShow.setDuration(400);
        valueAnimatorHide.setDuration(400);
    }

    @Override
    protected CommonPresenter createPresenter() {
        return new CommonPresenter(this,this);
    }

    @OnClick({R.id.llShowMore, R.id.btnSave, R.id.llBorrowTime, R.id.llReturnTime})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.llBorrowTime:
                isBorrow = true;
                datePickerDialog.show();
                break;
            case R.id.llReturnTime:
                isBorrow = false;
                datePickerDialog.show();
                break;
            case R.id.llShowMore:
                StatService.onEvent(mActivity,"添加欠款资产时点击更多","添加更多欠款信息",1);
                ImeUtil.hideSoftKeyboard(cetName);
                if (!isMoreShow) {
                    valueAnimatorShow.start();
                    isMoreShow = true;
                    ivShowMore.animate().rotation(180f).setDuration(400).start();
                } else {
                    valueAnimatorHide.start();
                    isMoreShow = false;
                    ivShowMore.animate().rotation(0f).setDuration(400).start();
                }
                break;
            case R.id.btnSave:
                if(isEdit){
                    StatService.onEvent(mActivity,"点击欠款资产编辑页确认按钮","编辑欠款资产",1);
                }else if(isFromAddasset){
                    StatService.onEvent(mActivity,"点击欠款资产添加页确认按钮","首次新增欠款",1);
                }else{
                    StatService.onEvent(mActivity,"欠款列表进入添加页并点击确认按钮","确认新增欠款",1);
                }
                if(valid()){
                    sava();
                }
                break;
        }
    }

    @Override
    public void onSuccess(SercetKeyOverdueModel model) {
        if (isEdit) {
            toastShow("编辑成功", R.drawable.gou_toast);
            cetName.postDelayed(new Runnable() {
                @Override
                public void run() {
                    ActivityUtils.startActivity(mActivity,ArrearsassetActivity.class);//从详情页跳转过来编辑成功后，回到列表页
                    ActivityUtils.finishActivity(mActivity);
                }
            }, ToastUtils.toastTime);
        } else {
            toastShow("添加成功", R.drawable.gou_toast);
            cetName.postDelayed(new Runnable() {
                @Override
                public void run() {
                    if (isFromList) {
                        ActivityUtils.finishActivity(mActivity);
                    } else {
                        Intent in = new Intent(mActivity, ArrearsassetActivity.class);
                        in.putExtra("from","add");
                        startActivity(in);
                        overridePendingTransition(R.anim.left_in, 0);
                    }
                }
            },ToastUtils.toastTime);

        }
    }

    @Override
    public void onFail(String msg) {

    }

    /**
     * 提交前判断输入是否为空
     * @return
     */
    boolean valid() {
        if (TextUtils.isEmpty(cetName.getText().toString())) {
            toastShow("请输入债权人姓名");
            return false;
        } else if(TextUtils.isEmpty(cetMoney.getText().toString())){
            toastShow("请输入欠款金额");
            return false;
        }else {
            return true;
        }
    }


    void sava() {
        RequestBody<AddOverseasRequestModel> loginRequestModel = new RequestBody<>();
        RequestBody.HeaderBean headerBean = new RequestBody.HeaderBean(Utils.getIPAddress(mActivity), spUtils.getSecretKeyId());
        AddOverseasRequestModel requestModel = new AddOverseasRequestModel();
        requestModel.setUserNo(spUtils.getUserId());
        requestModel.setId(id);
        requestModel.setArrearsName(cetName.getText().toString());
        requestModel.setAmount(cetMoney.getText().toString());
        requestModel.setLoanTime(tvBorrowTime.getText().toString());
        requestModel.setReturnTime(tvReturnTime.getText().toString());
        requestModel.setInterest(cetInterest.getText().toString());
        requestModel.setMemo(cetMemo.getText().toString());
        requestModel.setArrearsStatus(arrearsStatus);

        loginRequestModel.setBody(requestModel);
        loginRequestModel.setHeader(headerBean);

        Gson gson2 = new Gson();
        String json2 = gson2.toJson(loginRequestModel);
        LogUtils.logd(json2);
        try {
            encMsg = DESedeUtil.getRequestAfter3DES(spUtils.getSecretKey(), spUtils.getSecretIv(), json2);
            signMsg = DESedeUtil.getRequestAfterSign(encMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (isEdit) {
            mvpPresenter.updatearrearsasset(encMsg, signMsg, "2", spUtils.getSecretKeyId());
        } else {
            mvpPresenter.addarrearsasset(encMsg, signMsg, "2", spUtils.getSecretKeyId());
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        if(isEdit) {
            StatService.onPageStart(mActivity, "编辑欠款页面");
        }else{
            StatService.onPageStart(mActivity, "添加欠款页面");
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        ImeUtil.hideSoftKeyboard(cetName);
        if(isEdit) {
            StatService.onPageEnd(mActivity, "编辑欠款页面");
        }else{
            StatService.onPageEnd(mActivity, "添加欠款页面");
        }
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK
                && event.getAction() == KeyEvent.ACTION_DOWN) {
            StatService.onEvent(mActivity,"点击欠款资产编辑页返回按钮","放弃欠款资产编辑",1);
            ActivityUtils.finishActivity(mActivity);
            ImeUtil.hideSoftKeyboard(cetName);
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }
}
