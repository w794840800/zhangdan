package com.beidou.ybz.accountbook.ui;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.TextView;

import com.beidou.ybz.accountbook.R;
import com.beidou.ybz.accountbook.adapter.MessageListAdapter;
import com.beidou.ybz.accountbook.mvp.entity.AddOverseasRequestModel;
import com.beidou.ybz.accountbook.mvp.entity.MessageListModel;
import com.beidou.ybz.accountbook.mvp.entity.RequestBody;
import com.beidou.ybz.accountbook.mvp.other.MvpActivity;
import com.beidou.ybz.accountbook.mvp.presenter.CommonPresenter;
import com.beidou.ybz.accountbook.mvp.view.OtherView;
import com.beidou.ybz.accountbook.util.ActivityUtils;
import com.beidou.ybz.accountbook.util.DESedeUtil;
import com.beidou.ybz.accountbook.util.ImeUtil;
import com.beidou.ybz.accountbook.util.LogUtils;
import com.beidou.ybz.accountbook.util.Utils;
import com.beidou.ybz.accountbook.widget.EmptyView;
import com.chad.library.adapter.base.BaseQuickAdapter;
import com.google.gson.Gson;

import java.util.ArrayList;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;

public class MessageListActivity extends MvpActivity<CommonPresenter> implements OtherView<MessageListModel>, BaseQuickAdapter.RequestLoadMoreListener, SwipeRefreshLayout.OnRefreshListener {
    @Bind(R.id.tv_title)
    TextView tvTitle;
    @Bind(R.id.toolbar)
    Toolbar toolbar;
    @Bind(R.id.rv_list)
    RecyclerView rvList;
    @Bind(R.id.swipeLayout)
    SwipeRefreshLayout swipeLayout;
    @Bind(R.id.bob_empty_view)
    EmptyView mEmptyView;
    private int page = 1;
    //    private int pageSize = 10;
    private String encMsg, signMsg;
    private MessageListAdapter mAdapter;
    private List<MessageListModel.BodyBean.RowsBean> rowsBeans = new ArrayList<>();
    /**
     * 服务器端一共多少条数据
     */
    private static int TOTAL_COUNTER = 0;//如果服务器没有返回总数据或者总页数，这里设置为最大值比如10000，什么时候没有数据了根据接口返回判断
    /**
     * 每一页展示多少条数据
     */
    private static final int PAGE_SIZE = 10;


    /**
     * 已经获取到多少条数据了
     */
    private static int mCurrentCounter = 0;

    private boolean isLoadmore;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_message_list);
        ButterKnife.bind(this);

        tvTitle.setText("消息中心");
        tvTitle.setTextColor(getResources().getColor(R.color.txt_color));
        toolbar.setNavigationIcon(R.drawable.back_black);
        toolbar.setBackgroundColor(getResources().getColor(R.color.colorWhite));
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ImeUtil.hideSoftKeyboard(v);
                ActivityUtils.finishActivity(mActivity);
            }
        });

        mEmptyView.bindView(rvList); // 设置bindView
        mEmptyView.buttonClick(this, "request"); // 当button点击时调用哪个方法

        swipeLayout.setColorSchemeColors(Color.rgb(47, 223, 189));
        rvList.setLayoutManager(new LinearLayoutManager(this));
        swipeLayout.setOnRefreshListener(this);
        mAdapter = new MessageListAdapter(R.layout.message_item, null);
        mAdapter.setOnItemClickListener(new BaseQuickAdapter.OnItemClickListener() {
            @Override
            public void onItemClick(BaseQuickAdapter baseQuickAdapter, View view, int i) {
                LogUtils.loge("mAdapter.getData().size():"+mAdapter.getData().size());
                LogUtils.loge("mAdapter.getData().size():"+mAdapter.getData().get(i).getId());
                startActivity(new Intent(mActivity, MessageDetailActivity.class).putExtra("id",mAdapter.getData().get(i).getId()));
                overridePendingTransition(R.anim.left_in,0);
            }
        });

        rvList.setAdapter(mAdapter);
        mAdapter.setOnLoadMoreListener(this, rvList);
        messagelist(page);
    }

    @Override
    protected CommonPresenter createPresenter() {
        return new CommonPresenter(this, this);
    }

    /**
     * 获取消息列表数据
     *
     * @param pageNum
     */
    private void messagelist(int pageNum) {
        RequestBody<AddOverseasRequestModel> loginRequestModel = new RequestBody<>();
        RequestBody.HeaderBean headerBean = new RequestBody.HeaderBean(Utils.getIPAddress(mActivity), spUtils.getSecretKeyId());
        AddOverseasRequestModel requestModel = new AddOverseasRequestModel();

        requestModel.setPageSize(PAGE_SIZE + "");
        requestModel.setPageNum(pageNum + "");

        loginRequestModel.setBody(requestModel);
        loginRequestModel.setHeader(headerBean);
        Gson gson2 = new Gson();
        String json2 = gson2.toJson(loginRequestModel);
        LogUtils.logd(json2);
        try {
            encMsg = DESedeUtil.getRequestAfter3DES(spUtils.getSecretKey(), spUtils.getSecretIv(), json2);
            signMsg = DESedeUtil.getRequestAfterSign(encMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        mvpPresenter.messagelist(encMsg, signMsg, "2", spUtils.getSecretKeyId());
    }


    @Override
    public void onSuccess(final MessageListModel messageListModel) {
        swipeLayout.setRefreshing(false);
        mAdapter.loadMoreComplete();

        rowsBeans = messageListModel.getBody().getRows();

        if (rowsBeans != null && rowsBeans.size() > 0) {
            mEmptyView.success();
        } else {
            mEmptyView.setEmptyText("还没有消息哦～");
            mEmptyView.empty();
        }


        if (isLoadmore) {
            mAdapter.addData(rowsBeans);
        } else {
            mAdapter.setNewData(rowsBeans);
        }

        mCurrentCounter = mAdapter.getData().size();
        TOTAL_COUNTER = Integer.parseInt(messageListModel.getBody().getTotal());

//        mCurrentCounter += rowsBeans.size();
        Log.e("", "onNext: -------已经获取多少条数据-------" + mCurrentCounter);

        /**
         * 接口返回的数据 < 每页显示的数据量,不需要分页
         */
        if (mAdapter.getData().size() < PAGE_SIZE) {
            mAdapter.setEnableLoadMore(false);
        } else {
            mAdapter.setEnableLoadMore(true);
        }


    }

    @Override
    public void onFail(String model) {
        mEmptyView.loadfail();
    }

    @Override
    public void onRefresh() {
        mAdapter.setEnableLoadMore(false);
        page = 1;
        messagelist(page);
        isLoadmore = false;
        mCurrentCounter = PAGE_SIZE;
    }

    @Override
    public void onLoadMoreRequested() {
        isLoadmore = true;
        swipeLayout.setEnabled(false);
        /**
         * 接口返回的数据 < 每页显示的数据量
         */
        if (mAdapter.getData().size() < PAGE_SIZE) {
            mAdapter.loadMoreEnd(true);
        } else {
            if (mCurrentCounter >= TOTAL_COUNTER) {//获取到的数据 >= 总数，则加载结束
                //数据全部加载完毕
                mAdapter.loadMoreEnd();
            } else {//否则，继续加载
                if (isLoadmore) {
                    //成功获取更多数据
                    page++;
                    messagelist(page);
                } else {
                    //获取更多数据失败
                    isLoadmore = true;
                    toastShow("network_err");
                    mAdapter.loadMoreFail();
                }
            }
        }
        swipeLayout.setEnabled(true);
    }
}
