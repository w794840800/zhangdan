package com.beidou.ybz.accountbook.ui;

import android.content.Intent;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.baidu.mobstat.StatService;
import com.beidou.ybz.accountbook.R;
import com.beidou.ybz.accountbook.mvp.entity.AccountModel;
import com.beidou.ybz.accountbook.mvp.entity.AddOverseasRequestModel;
import com.beidou.ybz.accountbook.mvp.entity.RequestBody;
import com.beidou.ybz.accountbook.mvp.entity.SercetKeyOverdueModel;
import com.beidou.ybz.accountbook.mvp.entity.UserNoModel;
import com.beidou.ybz.accountbook.mvp.other.MvpActivity;
import com.beidou.ybz.accountbook.mvp.presenter.CommonPresenter;
import com.beidou.ybz.accountbook.mvp.view.CommonView;
import com.beidou.ybz.accountbook.mvp.view.OtherView;
import com.beidou.ybz.accountbook.retrofit.ApiStores;
import com.beidou.ybz.accountbook.util.ActivityUtils;
import com.beidou.ybz.accountbook.util.DESedeUtil;
import com.beidou.ybz.accountbook.util.LogUtils;
import com.beidou.ybz.accountbook.util.Utils;
import com.bumptech.glide.Glide;
import com.google.gson.Gson;
import com.tencent.connect.common.Constants;
import com.tencent.mm.sdk.modelmsg.SendAuth;
import com.tencent.mm.sdk.openapi.IWXAPI;
import com.tencent.mm.sdk.openapi.WXAPIFactory;
import com.tencent.tauth.IUiListener;
import com.tencent.tauth.Tencent;
import com.tencent.tauth.UiError;

import org.json.JSONObject;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;
import de.hdodenhof.circleimageview.CircleImageView;

//import com.tencent.mm.opensdk.modelmsg.SendAuth;
//import com.tencent.mm.opensdk.openapi.IWXAPI;
//import com.tencent.mm.opensdk.openapi.WXAPIFactory;
//import cn.sharesdk.framework.Platform;
//import cn.sharesdk.framework.PlatformActionListener;
//import cn.sharesdk.framework.ShareSDK;
//import cn.sharesdk.tencent.qq.QQ;

/**
 * Author: xu.yang on 2017/12/8
 * QQ:754444814
 * E-mail:754444814@qq.com
 * module: 个人信息
 */
public class PersonalInfoActivity extends MvpActivity<CommonPresenter> implements CommonView<AccountModel>, OtherView<SercetKeyOverdueModel> {
    @Bind(R.id.toolbar)
    Toolbar toolbar;
    private final int requestCodeMail = 2;
    @Bind(R.id.tvMail)
    TextView tvMail;
    @Bind(R.id.tvPhone)
    TextView tvPhone;
    @Bind(R.id.personalinfo_nicheng)
    TextView personalinfoNicheng;
    @Bind(R.id.iv_Touxiang)
    CircleImageView ivTouxiang;
    @Bind(R.id.tvWechat)
    TextView tvWechat;
    @Bind(R.id.tv_Qq)
    TextView tvQq;
    @Bind(R.id.rel_wechat)
    RelativeLayout relWechat;
    @Bind(R.id.rel_qq)
    RelativeLayout relQq;

    private String encMsg, signMsg;
    private IWXAPI api;
    public static Tencent mTencent;
    private static boolean isServerSideLogin = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_personalinfo);
        ButterKnife.bind(this);

        mTencent = Tencent.createInstance(ApiStores.QQ_APPID, this);
        api = WXAPIFactory.createWXAPI(this, ApiStores.WEIXIN_APP_ID, true);
        api.registerApp(ApiStores.WEIXIN_APP_ID);

        toolbar.setBackgroundColor(getResources().getColor(R.color.background));
        toolbar.setNavigationIcon(R.drawable.back);
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ActivityUtils.finishActivity(mActivity);
            }
        });
    }

    @Override
    public void getDataSuccess(AccountModel model) {
        String portraitUrl = model.getBody().getPortraitUrl();
        if (!portraitUrl.equals("") && !portraitUrl.startsWith("http")) {
            portraitUrl = ApiStores.OTHER_IMG_URL + portraitUrl;
        }
        Glide.with(mActivity)
                .load(portraitUrl)
//                .placeholder(R.drawable.defaultavatar)
                .error(R.drawable.defaultavatar)
                .into(ivTouxiang);
        spUtils.setPortraitUrl(portraitUrl);
        //--------昵称
        if (model.getBody().getNickName().equals("")) {
            personalinfoNicheng.setText("我是默认昵称");
        } else {
            personalinfoNicheng.setText(model.getBody().getNickName());
        }
        //-----微信名称
        if (model.getBody().getWechatFlag().equals("1")) {
            tvWechat.setText(model.getBody().getWechatName());
        } else {
            tvWechat.setText("未绑定");
        }
        //-------qq名称
        if (model.getBody().getQqFlag().equals("1")) {
            tvQq.setText(model.getBody().getQqName());
        } else {
            tvQq.setText("未绑定");
        }
        //-------邮箱
        if (model.getBody().getEmail() != null && model.getBody().getEmail() != "") {
            if (model.getBody().getEmail().length() > 20) {
                tvMail.setText(model.getBody().getEmail().substring(0, 20) + "...");
            } else {
                tvMail.setText(model.getBody().getEmail());
            }
        } else {
            tvMail.setText("快来填写");
        }

        tvPhone.setText(model.getBody().getHideMobile());

        /**
         * 存值
         */
        spUtils.setEmail(model.getBody().getEmail());//--------保存邮箱
        spUtils.setPhone(model.getBody().getMobile());//-------保存隐藏的手机号
        spUtils.setHidePhone(model.getBody().getHideMobile());//--------保存正常的手机号
        spUtils.setNickName(model.getBody().getNickName());
        spUtils.setPortraitUrl(model.getBody().getPortraitUrl());
    }

    @Override
    public void getDataFail(String msg) {

    }

    @Override
    protected void onResume() {
        isActive = true;
        super.onResume();
        getAccount();
        StatService.onPageStart(mActivity,"个人中心页面");
    }

    @Override
    protected void onPause() {
        super.onPause();
        StatService.onPageEnd(mActivity,"个人中心页面");
    }

    @Override
    protected CommonPresenter createPresenter() {
        return new CommonPresenter(this, this);
    }

    @OnClick({R.id.rlAuth, R.id.rlPhone, R.id.rlMail, R.id.rel_wechat, R.id.rel_qq})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.rlAuth:
                break;
            case R.id.rlPhone:
                ActivityUtils.startActivityRightIn(mActivity, VerifyOldPhoneActivity.class);
                break;
            case R.id.rlMail:
                String mail = tvMail.getText().toString();
                if (mail.equals("快来填写")) {
                    startActForResult("mail", "", requestCodeMail);
                } else {
                    startActForResult("mail", spUtils.getEmail(), requestCodeMail);
                }
                break;
            case R.id.rel_wechat:
                if (tvWechat.getText().toString().equals("未绑定")) {
                    final SendAuth.Req req = new SendAuth.Req();//021lJ33h2ac7FH0OIJ0h2P883h2lJ33C
                    req.scope = "snsapi_userinfo";
                    req.state = "app_wechat";
                    api.sendReq(req);
                    spUtils.setAccountbindWechat("1");
                } else {
                    if (spUtils.getIsGesture()) {//如果设置过手势密码
                        Intent in = new Intent(PersonalInfoActivity.this, GestureValidActivity.class);
                        in.putExtra("flag", "unbindvalid_wechat");
                        startActivity(in);
                        overridePendingTransition(R.anim.left_in, 0);
                    } else {
                        startActivity(new Intent(mActivity, ReleaseBindActivity.class)
                                .putExtra("thirdAcctChannel", "1"));
                    }
                }
                break;
            case R.id.rel_qq:
                if (tvQq.getText().toString().equals("未绑定")) {
                    //--------跳到绑定页面
                    onClickLogin();
                } else {
                    if (spUtils.getIsGesture()) {//如果设置过手势密码
                        Intent in = new Intent(PersonalInfoActivity.this, GestureValidActivity.class);
                        in.putExtra("flag", "unbindvalid_QQ");
                        startActivity(in);
                        overridePendingTransition(R.anim.left_in, 0);
                    } else {
                        startActivity(new Intent(mActivity, ReleaseBindActivity.class)
                                .putExtra("thirdAcctChannel", "2"));
                    }

                }
                break;
        }
    }

    /**
     * startActForResult
     *
     * @param tag
     * @param value
     * @param requestCode
     */
    void startActForResult(String tag, String value, int requestCode) {
        Intent in = new Intent(this, EditUserInfoActivity.class);
        in.putExtra(tag, value);
        in.putExtra("tag", tag);
        startActivityForResult(in, requestCode);
        overridePendingTransition(R.anim.left_in, 0);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        String info;
        if (resultCode == RESULT_OK) {
            info = data.getStringExtra("info");
            if (requestCode == requestCodeMail) {
                tvMail.setText(info);
            }
        }

        if (requestCode == Constants.REQUEST_LOGIN ||
                requestCode == Constants.REQUEST_APPBAR) {
            Tencent.onActivityResultData(requestCode, resultCode, data, loginListener);
        }
//        super.onActivityResult(requestCode, resultCode, data);
    }


    /**
     * 账户首页接口
     */
    private void getAccount() {
        RequestBody<UserNoModel> requestBody = new RequestBody<>();
        RequestBody.HeaderBean headerBean = new RequestBody.HeaderBean(Utils.getIPAddress(mActivity), spUtils.getSecretKeyId());
        UserNoModel requestModel = new UserNoModel();

        requestModel.setUserNo(spUtils.getUserId());
        requestBody.setBody(requestModel);
        requestBody.setHeader(headerBean);

        Gson gson2 = new Gson();
        String json2 = gson2.toJson(requestBody);

        try {
            encMsg = DESedeUtil.getRequestAfter3DES(spUtils.getSecretKey(), spUtils.getSecretIv(), json2);
            signMsg = DESedeUtil.getRequestAfterSign(encMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        mvpPresenter.account(encMsg, signMsg, "2", spUtils.getSecretKeyId());
    }

    /**
     * 账户首页绑定三方账号接口(QQ)
     */
    private void accountbind(String code, String openId) {
        RequestBody<AddOverseasRequestModel> changeMobileModelRequestBody = new RequestBody<AddOverseasRequestModel>();
        RequestBody.HeaderBean headerBean1 = new RequestBody.HeaderBean(Utils.getIPAddress(mActivity), spUtils.getSecretKeyId());
        AddOverseasRequestModel addOverseasRequestModel = new AddOverseasRequestModel();

        addOverseasRequestModel.setAcctChannel("2");//qq
        addOverseasRequestModel.setCode(code);
        addOverseasRequestModel.setOpenId(openId);
        addOverseasRequestModel.setUserNo(spUtils.getUserId());

        changeMobileModelRequestBody.setBody(addOverseasRequestModel);
        changeMobileModelRequestBody.setHeader(headerBean1);
        Gson gson1 = new Gson();
        String json1 = gson1.toJson(changeMobileModelRequestBody);
        try {
            encMsg = DESedeUtil.getRequestAfter3DES(spUtils.getSecretKey(), spUtils.getSecretIv(), json1);
            signMsg = DESedeUtil.getRequestAfterSign(encMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        mvpPresenter.accountbind(encMsg, signMsg, "2", spUtils.getSecretKeyId());
    }

    /**
     * 账户首页绑定三方账号
     *
     * @param model
     */
    @Override
    public void onSuccess(SercetKeyOverdueModel model) {
        toastShow("绑定成功");
        getAccount();
    }

    @Override
    public void onFail(String model) {
        toastShow(model);
    }


    /**
     * QQ登录
     */
    private void onClickLogin() {
        if (!mTencent.isSessionValid()) {
            mTencent.login(this, "all", loginListener);
            isServerSideLogin = false;
            Log.d("SDKQQAgentPref", "FirstLaunch_SDK:" + SystemClock.elapsedRealtime());
        } else {
            if (isServerSideLogin) { // Server-Side 模式的登陆, 先退出，再进行SSO登陆
                mTencent.logout(this);
                mTencent.login(this, "all", loginListener);
                isServerSideLogin = false;
                Log.d("SDKQQAgentPref", "FirstLaunch_SDK:" + SystemClock.elapsedRealtime());
                return;
            }
            mTencent.logout(this);
        }
    }

    IUiListener loginListener = new PersonalInfoActivity.BaseUiListener() {
        @Override
        protected void doComplete(JSONObject values) {
            Log.d("SDKQQAgentPref", "AuthorSwitch_SDK:" + SystemClock.elapsedRealtime());
            initOpenidAndToken(values);
        }
    };


    private class BaseUiListener implements IUiListener {

        @Override
        public void onComplete(Object response) {
            if (null == response) {
//                Util.showResultDialog(MainActivity.this, "返回为空", "登录失败");
                return;
            }
            JSONObject jsonResponse = (JSONObject) response;
            if (null != jsonResponse && jsonResponse.length() == 0) {
//                Util.showResultDialog(MainActivity.this, "返回为空", "登录失败");
                return;
            }
//            Util.showResultDialog(MainActivity.this, response.toString(), "登录成功");
            doComplete((JSONObject) response);
        }

        protected void doComplete(JSONObject values) {

        }

        @Override
        public void onError(UiError e) {
//            Util.toastMessage(MainActivity.this, "onError: " + e.errorDetail);
//            Util.dismissDialog();
        }

        @Override
        public void onCancel() {
//            Util.toastMessage(MainActivity.this, "onCancel: ");
//            Util.dismissDialog();
//            if (isServerSideLogin) {
//                isServerSideLogin = false;
//            }
        }
    }

    public void initOpenidAndToken(JSONObject jsonObject) {
        try {
            String token = jsonObject.getString(Constants.PARAM_ACCESS_TOKEN);
            String expires = jsonObject.getString(Constants.PARAM_EXPIRES_IN);
            String openId = jsonObject.getString(Constants.PARAM_OPEN_ID);
            if (!TextUtils.isEmpty(token) && !TextUtils.isEmpty(expires)
                    && !TextUtils.isEmpty(openId)) {
                mTencent.setAccessToken(token, expires);
                mTencent.setOpenId(openId);
                LogUtils.loge("------------" + token + "------------" + expires + "-------------" + openId);
//                thirdlogin_qq(token, openId);
                accountbind(token, openId);
            }
        } catch (Exception e) {
        }
    }


}
