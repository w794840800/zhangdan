package com.beidou.ybz.accountbook.ui;

import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.beidou.ybz.accountbook.R;
import com.beidou.ybz.accountbook.mvp.entity.AddOverseasRequestModel;
import com.beidou.ybz.accountbook.mvp.entity.RequestBody;
import com.beidou.ybz.accountbook.mvp.entity.SercetKeyOverdueModel;
import com.beidou.ybz.accountbook.mvp.other.MvpActivity;
import com.beidou.ybz.accountbook.mvp.presenter.CommonPresenter;
import com.beidou.ybz.accountbook.mvp.view.CommonView;
import com.beidou.ybz.accountbook.util.ActivityUtils;
import com.beidou.ybz.accountbook.util.DESedeUtil;
import com.beidou.ybz.accountbook.util.ImeUtil;
import com.beidou.ybz.accountbook.util.LogUtils;
import com.beidou.ybz.accountbook.util.Utils;
import com.beidou.ybz.accountbook.widget.ClearEditText;
import com.google.gson.Gson;
import com.jakewharton.rxbinding.widget.RxTextView;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;
import rx.Observable;
import rx.functions.Action1;
import rx.functions.Func2;
import rx.functions.Func5;

/**
 * Author: xu.yang on 2018/1/4
 * QQ:754444814
 * E-mail:754444814@qq.com
 * module:意见反馈
 */
public class FeedBackActivity extends MvpActivity<CommonPresenter> implements CommonView<SercetKeyOverdueModel> {
    @Bind(R.id.tv_title)
    TextView tvTitle;
    @Bind(R.id.toolbar)
    Toolbar toolbar;
    @Bind(R.id.etContent)
    EditText etContent;
    @Bind(R.id.count)
    TextView tvCount;
    private static final int MAX_COUNT = 200;
    @Bind(R.id.cetPhone)
    ClearEditText cetPhone;
    @Bind(R.id.btnSave)
    Button btnSave;
    private String encMsg, signMsg;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_feedback);
        ButterKnife.bind(this);

        tvTitle.setText("意见反馈");
        tvTitle.setTextColor(getResources().getColor(R.color.txt_color));
        toolbar.setNavigationIcon(R.drawable.back_black);
        toolbar.setBackgroundColor(getResources().getColor(R.color.colorWhite));
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ImeUtil.hideSoftKeyboard(v);
                ActivityUtils.finishActivity(mActivity);
            }
        });
        bindViewByRxBinding();
        etContent.addTextChangedListener(mTextWatcher);
        etContent.setSelection(etContent.length()); // 将光标移动最后一个字符后面
    }


    /**
     * 计算分享内容的字数，一个汉字=两个英文字母，一个中文标点=两个英文标点 注意：该函数的不适用于对单个字符进行计算，因为单个字符四舍五入后都是1
     *
     * @param c
     * @return
     */
    private long calculateLength(CharSequence c) {
        double len = 0;
        for (int i = 0; i < c.length(); i++) {
            int tmp = (int) c.charAt(i);
            if (tmp > 0 && tmp < 127) {
                len += 0.5;
            } else {
                len++;
            }
        }
        return Math.round(len);
    }


    /**
     * 刷新剩余输入字数
     */
    private void setLeftCount() {
//        tvCount.setText(String.valueOf((MAX_COUNT - getInputCount())));
        tvCount.setText(String.valueOf(getInputCount()) + "/" + MAX_COUNT);
    }

    /**
     * 用combineLatest处理表单验证
     */
    private void bindViewByRxBinding() {
        Observable<CharSequence> Observable1 = RxTextView.textChanges(etContent);
        Observable<CharSequence> Observable2 = RxTextView.textChanges(cetPhone);

        Observable.combineLatest(Observable1, Observable2, new Func2<CharSequence, CharSequence, Boolean>() {
            @Override
            public Boolean call(CharSequence string1, CharSequence string2) {
                return (!Utils.isTextEmpty(string1.toString()) && string1.toString().length() >= 5) || !Utils.isTextEmpty(string2.toString());
            }
        }).subscribe(new Action1<Boolean>() {
            @Override
            public void call(Boolean verify) {
                if (verify) {
                    btnSave.setEnabled(true);
                    btnSave.setBackgroundResource(R.drawable.bg1);
                } else {
                    btnSave.setEnabled(false);
                    btnSave.setBackgroundResource(R.drawable.bg_unenabled);
                }
            }
        });

    }

    /**
     * 获取用户输入的分享内容字数
     *
     * @return
     */
    private long getInputCount() {
        return calculateLength(etContent.getText().toString());
    }

    private TextWatcher mTextWatcher = new TextWatcher() {
        private int editStart;
        private int editEnd;

        public void afterTextChanged(Editable s) {
            editStart = etContent.getSelectionStart();
            editEnd = etContent.getSelectionEnd();

            // 先去掉监听器，否则会出现栈溢出
            etContent.removeTextChangedListener(mTextWatcher);

            // 注意这里只能每次都对整个EditText的内容求长度，不能对删除的单个字符求长度
            // 因为是中英文混合，单个字符而言，calculateLength函数都会返回1
            while (calculateLength(s.toString()) > MAX_COUNT) { // 当输入字符个数超过限制的大小时，进行截断操作
                s.delete(editStart - 1, editEnd);
                editStart--;
                editEnd--;
            }

            if (calculateLength(s.toString()) >= MAX_COUNT) {
                tvCount.setTextColor(Color.parseColor("#AB3B3A"));
            } else {
                tvCount.setTextColor(Color.parseColor("#D3D6DE"));
            }

            etContent.setText(s);
            etContent.setSelection(editStart);

            // 恢复监听器
            etContent.addTextChangedListener(mTextWatcher);

            setLeftCount();
        }

        public void beforeTextChanged(CharSequence s, int start, int count,
                                      int after) {
        }

        public void onTextChanged(CharSequence s, int start, int before,
                                  int count) {
        }
    };

    void save() {
        RequestBody<AddOverseasRequestModel> loginRequestModel = new RequestBody<>();
        RequestBody.HeaderBean headerBean = new RequestBody.HeaderBean(Utils.getIPAddress(mActivity), spUtils.getSecretKeyId());
        AddOverseasRequestModel requestModel = new AddOverseasRequestModel();
        requestModel.setUserNo(spUtils.getUserId());
        requestModel.setTel(spUtils.getPhone());
        requestModel.setContent(etContent.getText().toString());
        requestModel.setContact(cetPhone.getText().toString());

        loginRequestModel.setBody(requestModel);
        loginRequestModel.setHeader(headerBean);

        Gson gson2 = new Gson();
        String json2 = gson2.toJson(loginRequestModel);
        LogUtils.loge("请求参数：" + json2);
        try {
            encMsg = DESedeUtil.getRequestAfter3DES(spUtils.getSecretKey(), spUtils.getSecretIv(), json2);
            signMsg = DESedeUtil.getRequestAfterSign(encMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        mvpPresenter.feedback(encMsg, signMsg, "2", spUtils.getSecretKeyId());
    }


    @Override
    public void getDataSuccess(SercetKeyOverdueModel model) {
        toastShow("提交成功",R.drawable.gou_toast);
        ActivityUtils.finishActivity(mActivity);
    }

    @Override
    public void getDataFail(String msg) {
        toastShow(msg);
    }

    @Override
    protected CommonPresenter createPresenter() {
        return new CommonPresenter(this, this);
    }

    @OnClick(R.id.btnSave)
    public void onViewClicked() {
        if( valid()) {
            save();
        }
    }

    /**
     * 提交前判断输入是否为空
     * @return
     */
    boolean valid() {
        if (TextUtils.isEmpty(etContent.getText().toString())) {
            toastShow("请输入反馈内容");
            return false;
        } else if(etContent.getText().toString().length() < 5){
            toastShow("反馈内容不得少于5个字");
            return false;
        }else {
            return true;
        }
    }


    @Override
    protected void onPause() {
        super.onPause();
        ImeUtil.hideSoftKeyboard(etContent);
    }
}
