package com.beidou.ybz.accountbook.ui;

import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.AppBarLayout;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.KeyEvent;
import android.view.View;
import android.widget.ImageButton;
import android.widget.TextView;

import com.baidu.mobstat.StatService;
import com.beidou.ybz.accountbook.R;
import com.beidou.ybz.accountbook.adapter.AdapterStock;
import com.beidou.ybz.accountbook.mvp.entity.StockListModel;
import com.beidou.ybz.accountbook.mvp.presenter.CommonPresenter;
import com.beidou.ybz.accountbook.mvp.view.CommonView;
import com.beidou.ybz.accountbook.retrofit.ApiStores;
import com.beidou.ybz.accountbook.util.AppBarStateChangeListener;
import com.beidou.ybz.accountbook.util.DESedeUtil;
import com.beidou.ybz.accountbook.util.DialogClickListener;
import com.beidou.ybz.accountbook.util.LogUtils;
import com.beidou.ybz.accountbook.widget.EmptyView;
import com.beidou.ybz.accountbook.mvp.entity.AddOverseasRequestModel;
import com.beidou.ybz.accountbook.mvp.entity.RequestBody;
import com.beidou.ybz.accountbook.mvp.entity.SercetKeyOverdueModel;
import com.beidou.ybz.accountbook.mvp.entity.UserNoModel;
import com.beidou.ybz.accountbook.mvp.other.MvpActivity;
import com.beidou.ybz.accountbook.mvp.view.OtherView;
import com.beidou.ybz.accountbook.util.ActivityUtils;
import com.beidou.ybz.accountbook.util.AlertDialogUtils;
import com.beidou.ybz.accountbook.util.Utils;
import com.chad.library.adapter.base.BaseQuickAdapter;
import com.google.gson.Gson;

import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * Author: xu.yang on 2017/12/6
 * QQ:754444814
 * E-mail:754444814@qq.com
 * module: 股票界面
 */
public class StockActivity extends MvpActivity<CommonPresenter> implements CommonView<StockListModel>, OtherView<SercetKeyOverdueModel> {
    @Bind(R.id.bob_empty_view)
    EmptyView mEmptyView;
    @Bind(R.id.appbar)
    AppBarLayout appbar;
    @Bind(R.id.tv_title)
    TextView tvTitle;
    @Bind(R.id.tvAddAssets)
    TextView tvAddAssets;
    @Bind(R.id.toolbar)
    Toolbar toolbar;
    @Bind(R.id.ib_back)
    ImageButton ibBack;
    @Bind(R.id.swipeRefresh)
    SwipeRefreshLayout mSwipeRefreshLayout;
    @Bind(R.id.rv)
    RecyclerView rv;
    @Bind(R.id.tvDqsz)
    TextView tvDqsz;
    @Bind(R.id.tvZrzd)
    TextView tvZrzd;
    private String encMsg, signMsg, from;
    private AdapterStock mAdapter;
    private List<StockListModel.BodyBean.PositionListBean> positionListBeanList;
    AlertDialogUtils alertDialogUtils;
    private int mPosition;//删除的position
    private int count;
    String zde, zdf = "";
    private boolean isFromAdd;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_stock);
        ButterKnife.bind(this);

        tvAddAssets.setText("+  新建股票");
        tvTitle.setText("股票");
        tvTitle.setTextColor(getResources().getColor(R.color.txt_color));
        alertDialogUtils = new AlertDialogUtils(mActivity);
        mAdapter = new AdapterStock(R.layout.stocklist_item, null);
        rv.setLayoutManager(new LinearLayoutManager(this));
        rv.setAdapter(mAdapter);

        handleIntent(getIntent());

        mAdapter.setOnItemLongClickListener(new BaseQuickAdapter.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(BaseQuickAdapter adapter, View view, int position) {
                alertDialogUtils.setMessage("确定要删除" + positionListBeanList.get(position).getStockName() + "？");
                alertDialogUtils.setPosition(position);
                alertDialogUtils.show();
                return true;
                //返回false时点击事件和长按事件会有冲突，设为true,事件拦截，冲突解除
            }
        });

        mAdapter.setOnItemClickListener(new BaseQuickAdapter.OnItemClickListener() {
            @Override
            public void onItemClick(BaseQuickAdapter adapter, View view, int position) {
                String id = positionListBeanList.get(position).getId();//股票id
                String stockName = positionListBeanList.get(position).getStockName();//股票名称
                String stockCode = positionListBeanList.get(position).getStockCode();//股票代码
                String positionNumber = positionListBeanList.get(position).getPositionNumber();//持仓数量
                String brokerName = positionListBeanList.get(position).getBrokerName();//券商名称
                String memo = positionListBeanList.get(position).getMemo();//备注内容

                requestUrl(id, stockCode, stockName, positionNumber, brokerName, memo);
            }
        });

        alertDialogUtils.setOnDialogClickListener(new DialogClickListener() {
            @Override
            public void clickYes(int which) {
                StatService.onEvent(mActivity,"点击股票列表任一删除按钮","删除股票具体资产",1);
                LogUtils.logd("which:" + which);
                mPosition = which;
                del(positionListBeanList.get(which).getId());
            }

            @Override
            public void clickNo() {
            }
        });


        mEmptyView.bindView(rv); // 设置bindView
        mEmptyView.buttonClick(this, "request"); // 当button点击时调用哪个方法


        //下拉刷新条的颜色
        mSwipeRefreshLayout.setColorSchemeResources(R.color.colorGold);

        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                request();
            }
        });

        appbar.addOnOffsetChangedListener(new AppBarStateChangeListener() {
            @Override
            public void onOffset(AppBarLayout appBarLayout, int i) {
                int totalOffset = appBarLayout.getTotalScrollRange();
                float scale = (float) (totalOffset - i) / (float) totalOffset;//展开-1 收起-0

                /**
                 * 根据appbar收放改变字体颜色
                 */
                if (scale < 0.5) {
                    tvTitle.setTextColor(getResources().getColor(R.color.colorBlack));
                    tvTitle.setAlpha(1 - scale * 2);
                    ibBack.setImageResource(R.drawable.back_black);
                    ibBack.setAlpha(1 - scale * 2);
                } else {
                    tvTitle.setTextColor(getResources().getColor(R.color.colorWhite));
                    tvTitle.setAlpha(2 * scale - 1);
                    ibBack.setImageResource(R.drawable.back);
                    ibBack.setAlpha(2 * scale - 1);
                }
            }

            @Override
            public void onStateChanged(AppBarLayout appBarLayout, State state) {
                //判断appbar状态，防止与SwipeRefreshLayout下拉事件冲突
                if (state == State.EXPANDED) {//展开状态
                    mSwipeRefreshLayout.setEnabled(true);
                } else if (state == State.COLLAPSED) {//折叠状态
                    mSwipeRefreshLayout.setEnabled(false);
                } else if (state == State.IDLE) {//折叠状态
                    mSwipeRefreshLayout.setEnabled(false);
                }
            }
        });
    }


    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        handleIntent(intent);
    }

    private void handleIntent(Intent in) {
        if (in != null) {
            from = in.getStringExtra("from");
        }

        if (from != null && from.equals("add")) {
            isFromAdd = true;
        } else {
            isFromAdd = false;
        }
    }


    @Override
    protected void onResume() {
        super.onResume();
        request();
        StatService.onPageStart(mActivity, "股票列表页面");
    }

    @Override
    protected void onPause() {
        super.onPause();
        StatService.onPageEnd(mActivity, "股票列表页面");
    }


    /**
     * 网络请求
     */
    void request() {
        RequestBody<UserNoModel> requestBody = new RequestBody<>();
        RequestBody.HeaderBean headerBean = new RequestBody.HeaderBean(Utils.getIPAddress(mActivity), spUtils.getSecretKeyId());
        UserNoModel requestModel = new UserNoModel();//10051547
        requestModel.setUserNo(spUtils.getUserId());//spUtils.getUserId()

        requestBody.setBody(requestModel);
        requestBody.setHeader(headerBean);

        Gson gson2 = new Gson();
        String json2 = gson2.toJson(requestBody);
        LogUtils.loge("请求参数：" + json2);
        try {
            encMsg = DESedeUtil.getRequestAfter3DES(spUtils.getSecretKey(), spUtils.getSecretIv(), json2);
            signMsg = DESedeUtil.getRequestAfterSign(encMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        mvpPresenter.getstocklist(encMsg, signMsg, "2", spUtils.getSecretKeyId());
        if (count == 0) {
            mEmptyView.loading();
        }
    }


    void requestUrl(String id, String stockCode, String stockName, String positionNumber, String brokerName, String memo) {
        RequestBody<AddOverseasRequestModel> requestBody = new RequestBody<>();
        RequestBody.HeaderBean headerBean = new RequestBody.HeaderBean(Utils.getIPAddress(mActivity), spUtils.getSecretKeyId());
        AddOverseasRequestModel requestModel = new AddOverseasRequestModel();//10051547
        requestModel.setUserNo(spUtils.getUserId());//spUtils.getUserId()
        requestModel.setId(id);
        requestModel.setStockCode(stockCode);

        requestBody.setBody(requestModel);
        requestBody.setHeader(headerBean);

        Gson gson2 = new Gson();
        String json2 = gson2.toJson(requestBody);
        LogUtils.loge("请求参数：" + json2);
        try {
            encMsg = DESedeUtil.getRequestAfter3DES(spUtils.getSecretKey(), spUtils.getSecretIv(), json2);
            signMsg = DESedeUtil.getRequestAfterSign(encMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }

        String url = ApiStores.StockPro + "?encMsg=" + encMsg + "&signMsg=" + signMsg + "&msgType=2" + "&secretKeyId=" + spUtils.getSecretKeyId();
        LogUtils.loge("请求url：" + url);
        // requestUrl(id,stockCode,stockName,positionNumber,brokerName,memo);from
        Intent in = new Intent(this, WebActivity.class);
        in.putExtra("from", "stocklist");//来自股票列表
        in.putExtra("id", id);
        in.putExtra("url", url);
        in.putExtra("stockCode", stockCode);
        in.putExtra("stockName", stockName);
        in.putExtra("positionNumber", positionNumber);
        in.putExtra("brokerName", brokerName);
        in.putExtra("memo", memo);
        startActivity(in);
        overridePendingTransition(R.anim.left_in, 0);
    }


    @Override
    protected CommonPresenter createPresenter() {
        return new CommonPresenter(this, this);
    }

    @OnClick({R.id.ib_back, R.id.tvAddAssets})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.ib_back:
//                if(isFromAdd) {//如果从添加页跳转过来，点击返回直接跳到首页
                ActivityUtils.startActivity(mActivity, MainActivity.class);
                ActivityUtils.finishActivity(mActivity);
//                }else{
//                    ActivityUtils.finishActivity(mActivity);
//                }
                break;
            case R.id.tvAddAssets:
                StatService.onEvent(mActivity, "股票列表页点击新增", "新增股票", 1);
                Intent in = new Intent(mActivity, AddStockAssets.class);
                in.putExtra("from", "list");
                startActivity(in);
                overridePendingTransition(R.anim.left_in, 0);
                break;
        }
    }

    @Override
    public void getDataSuccess(StockListModel model) {
        try {
            positionListBeanList = model.getBody().getPositionList();
            LogUtils.logd("positionListBeanList == null:" + (positionListBeanList == null));

            mSwipeRefreshLayout.setRefreshing(false);
            tvDqsz.setText(Utils.addCommaContainsPoint(model.getBody().getZsz()));
            zde = model.getBody().getZde();
            zdf = String.valueOf(Double.parseDouble(model.getBody().getZdf()) * 100);
            if (zde != null && zde.startsWith("-")) {
                tvZrzd.setTextColor(getResources().getColor(R.color.stock_green));
                tvZrzd.setText("-" + Utils.addCommaContainsPoint(zde.substring(1)) + "\t\t(-" + Utils.addCommaContainsPoint(zdf.substring(1)) + "%)");
            } else if (zde != null && Double.parseDouble(zde) == 0) {
                tvZrzd.setTextColor(getResources().getColor(R.color.detailColor));
                tvZrzd.setText("0.00");
            } else if (zde == null) {
                tvZrzd.setTextColor(getResources().getColor(R.color.detailColor));
                tvZrzd.setText("0.00");
            } else {
                tvZrzd.setTextColor(getResources().getColor(R.color.stock_red));
                tvZrzd.setText(Utils.addCommaContainsPoint(zde) + "\t\t(" + Utils.addCommaContainsPoint(zdf) + "%)");
            }
            count++;
            if (positionListBeanList != null && positionListBeanList.size() > 0) {
                mEmptyView.success();
                mAdapter.setNewData(positionListBeanList);

            } else {
                mEmptyView.setEmptyText("还没有股票产品哦～");
                mEmptyView.empty();
            }
        } catch (Exception e) {
            LogUtils.logd("positionListBeanList:catch");
            tvZrzd.setTextColor(getResources().getColor(R.color.detailColor));
            tvZrzd.setText("0.00%");
            mEmptyView.setEmptyText("还没有股票产品哦～");
            mEmptyView.empty();
            e.printStackTrace();
        }

    }

    @Override
    public void getDataFail(String msg) {
        mSwipeRefreshLayout.setRefreshing(false);
        toastShow(msg);
        mEmptyView.loadfail();
    }

    void del(String id) {
        RequestBody<AddOverseasRequestModel> requestBody = new RequestBody<>();
        RequestBody.HeaderBean headerBean = new RequestBody.HeaderBean(Utils.getIPAddress(mActivity), spUtils.getSecretKeyId());
        AddOverseasRequestModel requestModel = new AddOverseasRequestModel();
        requestModel.setUserNo(spUtils.getUserId());
        requestModel.setId(id);

        requestBody.setBody(requestModel);
        requestBody.setHeader(headerBean);

        Gson gson = new Gson();
        String json = gson.toJson(requestBody);

        try {
            encMsg = DESedeUtil.getRequestAfter3DES(spUtils.getSecretKey(), spUtils.getSecretIv(), json);
            signMsg = DESedeUtil.getRequestAfterSign(encMsg);
        } catch (Exception e) {
            e.printStackTrace();
        }
        mvpPresenter.delstock(encMsg, signMsg, "2", spUtils.getSecretKeyId());
    }

    @Override
    public void onSuccess(SercetKeyOverdueModel model) {
        toastShow("删除成功", R.drawable.gou_toast);
        positionListBeanList.remove(mPosition);
        mAdapter.notifyItemRemoved(mPosition);//推荐用这个
        request();
        if (mAdapter.getItemCount() == 0) {
            mEmptyView.setEmptyText("还没有股票产品哦～");
            mEmptyView.empty();
            tvZrzd.setTextColor(getResources().getColor(R.color.detailColor));
            tvZrzd.setText("0.00%");
        }
    }

    @Override
    public void onFail(String model) {
        toastShow(model);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK
                && event.getAction() == KeyEvent.ACTION_DOWN) {
//            if (isFromAdd) {//如果从添加页跳转过来，点击返回直接跳到首页
            ActivityUtils.startActivity(mActivity, MainActivity.class);
            ActivityUtils.finishActivity(mActivity);
//            } else {
//                ActivityUtils.finishActivity(mActivity);
//            }
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }
}
